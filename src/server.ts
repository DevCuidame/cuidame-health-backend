import app from './app';
import config from './core/config/environment';
import logger from './utils/logger';
import { ChatSocketService } from './modules/chat/websocket/chat-socket.service';


// Establecer puerto
const PORT = config.server.port;
const HOST = config.server.host;



// Iniciar servidor
const server = app.listen(PORT, () => {
  logger.info(`üöÄ Servidor ejecut√°ndose en http://${HOST}:${PORT}`);
  logger.info(`üìö API disponible en http://${HOST}:${PORT}${config.server.apiPrefix}`);
  logger.info(`üåç Entorno: ${config.env}`);
});


// Inicializar servicio de WebSocket y mostrar informaci√≥n
const chatSocketService = new ChatSocketService(server);
logger.info(`üì± WebSocket Chat disponible en ws://${HOST}:${PORT}/ws/chat`);
logger.info(`üí¨ Servicio de chat en tiempo real inicializado`);


// Manejar se√±ales de terminaci√≥n
process.on('SIGTERM', () => {
  logger.info('SIGTERM recibido. Cerrando servidor HTTP');
  shutdown();
});

process.on('SIGINT', () => {
  logger.info('SIGINT recibido. Cerrando servidor HTTP');
  shutdown();
});

// Funci√≥n para cerrar graciosamente
const shutdown = () => {
  server.close(() => {
    logger.info('Servidor HTTP cerrado');
    process.exit(0);
  });
  
  // Forzar cierre si tarda m√°s de 10 segundos
  setTimeout(() => {
    logger.error('Cierre forzado despu√©s del tiempo de espera');
    process.exit(1);
  }, 10000);
};

export default server;